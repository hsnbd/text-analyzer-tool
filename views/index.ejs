
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.84.0">
    <title>Dashboard Template Â· Bootstrap v5.0</title>

    <link rel="canonical" href="https://getbootstrap.com/docs/5.0/examples/dashboard/">


    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="/bootstrap.min.css">
    <!-- Favicons -->
    <link rel="apple-touch-icon" href="https://getbootstrap.com/docs/5.0/assets/img/favicons/apple-touch-icon.png" sizes="180x180">
    <link rel="icon" href="https://getbootstrap.com/docs/5.0/assets/img/favicons/favicon-32x32.png" sizes="32x32" type="image/png">
    <link rel="icon" href="https://getbootstrap.com/docs/5.0/assets/img/favicons/favicon-16x16.png" sizes="16x16" type="image/png">
    <link rel="manifest" href="https://getbootstrap.com/docs/5.0/assets/img/favicons/manifest.json">
    <link rel="mask-icon" href="https://getbootstrap.com/docs/5.0/assets/img/favicons/safari-pinned-tab.svg" color="#7952b3">
    <link rel="icon" href="https://getbootstrap.com/docs/5.0/assets/img/favicons/favicon.ico">
    <meta name="theme-color" content="#7952b3">
    <link href="/examples_dashboard.css" rel="stylesheet">

    <style>
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            z-index: 999;
        }
        #loader.hidden {
            display: none !important;
        }

        #username {
            visibility: hidden;
        }
        #logout {
            visibility: hidden;
        }
    </style>
</head>
<body>
<div id="loader" class="overlay d-flex justify-content-center align-items-center">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
    <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" href="/frontend">Text Analyzer Tool</a>
    <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>


    <div class="navbar-nav">
        <div class="nav-item d-flex">
            <span class="nav-link px-3" id="username">Your name</span>
            <a class="nav-link px-3" id="logout" href="#">Sign out</a>
        </div>
    </div>
</header>

<div class="container-fluid">
    <div class="row">
        <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
            <div class="position-sticky pt-3">
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/frontend">
                            <span data-feather="home"></span>
                            Dashboard
                        </a>
                    </li>
                </ul>
            </div>
        </nav>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
                <h1 class="h2">All Texts Reports</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
<!--                    <div class="btn-group me-2">-->
<!--                        <button type="button" class="btn btn-sm btn-outline-secondary">Share</button>-->
<!--                        <button type="button" class="btn btn-sm btn-outline-secondary">Export</button>-->
<!--                    </div>-->
                    <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#createTextModal">
                        Create New Text
                    </button>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>Text Body</th>
                        <th>Created At</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody id="text-table-body"></tbody>
                </table>
            </div>
        </main>
    </div>
</div>



<!-- Create Modal -->
<div class="modal fade" id="createTextModal" tabindex="-1" aria-labelledby="createTextModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTextModalLabel">Create New Text</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createTextForm">
                    <div class="mb-3">
                        <label for="textBody" class="form-label">Text Body</label>
                        <textarea class="form-control" id="textBody" rows="4" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editTextModal" tabindex="-1" aria-labelledby="editTextModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTextModalLabel">Edit Text</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                    <form id="editTextForm" data-text-id="">
                    <div class="mb-3">
                        <label for="editTextBody" class="form-label">Text Body</label>
                        <textarea class="form-control" id="editTextBody" rows="4" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>


<script src="/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script src="/feather.min.js" crossorigin="anonymous"></script>
<script src="/keycloak.min.js"></script>
<script src="/axios.min.js"></script>
<script>
  feather.replace();
</script>
<script>
  async function fetchTextData(token) {
    try {
      const response = await axios.get('/texts', {headers: {Authorization: `Bearer ${token}`}});
      renderTextTable(response.data);
    } catch (error) {
      console.error('There has been a problem with your fetch operation:', error);
    }
  }

  function renderTextTable(data) {
    const tableBody = document.getElementById('text-table-body');
    tableBody.innerHTML = '';

    data.forEach(item => {
      const row = document.createElement('tr');

      const textBodyCell = document.createElement('td');
      textBodyCell.textContent = item.text_body;

      const createdAtCell = document.createElement('td');
      createdAtCell.textContent = new Date(item.createdAt).toLocaleString(); // Format date

      const actionsCell = document.createElement('td');
      actionsCell.innerHTML = `
            <button class="btn btn-warning btn-sm" onclick="editText(${item.id})">Edit</button>
            <button class="btn btn-danger btn-sm" onclick="deleteText(${item.id})">Delete</button>
        `;

      row.appendChild(textBodyCell);
      row.appendChild(createdAtCell);
      row.appendChild(actionsCell);

      tableBody.appendChild(row);
    });
  }

  async function editText(id) {
    try {
      const response = await axios.get(`/texts/${id}`, {headers: {Authorization: `Bearer ${keycloak.token}`}});

      document.getElementById('editTextBody').value = response.data.text_body;
      const editForm = document.getElementById('editTextForm');
      editForm.setAttribute('data-text-id', id);

      let modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('editTextModal'))
      modal.show()
    } catch (error) {
      console.error('Error editing');
    }
  }

  async function deleteText(id) {
    try {
      await axios.delete(`/texts/${id}`, {headers: {Authorization: `Bearer ${keycloak.token}`}});
      await fetchTextData(keycloak.token);
    } catch (error) {
      console.error('Error deleting text:', error);
    }
  }

  const keycloak = new Keycloak({
    url: 'http://localhost:8080/auth',
    realm: 'wsd',
    clientId: 'text_analyzer'
  });

  (async () => {
    try {
      const authenticated = await keycloak.init({
        onLoad: 'login-required',
      });
      console.log(`User is ${authenticated ? 'authenticated' : 'not authenticated'}`);

      if (authenticated) {
        document.getElementById('username').innerHTML = `${keycloak.tokenParsed.given_name} ${keycloak.tokenParsed.family_name}`;

        document.getElementById("username").style.visibility = "visible";
        document.getElementById("logout").style.visibility = "visible";
        document.getElementById('loader').classList.add('hidden');

        fetchTextData(keycloak.token)
      }
    } catch (error) {
      console.error('Failed to initialize adapter:', error);
    } finally {
      console.log('finally')
    }
  })();

  document.getElementById('logout').addEventListener('click', () => {
    keycloak.logout();
  });

  document.getElementById('createTextForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const textBody = document.getElementById('textBody').value;

    try {
      await axios.post('/texts', {text_body: textBody}, {headers: {Authorization: `Bearer ${keycloak.token}`, 'Content-Type': 'application/json',}});

      document.getElementById('createTextForm').reset();
      const modalElement = document.getElementById('createTextModal');
      const modal = bootstrap.Modal.getInstance(modalElement);
      modal.hide();

      await fetchTextData(keycloak.token);
    } catch (error) {
      console.error('Error creating text:', error);
    }
  });

  document.getElementById('editTextForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const textBody = document.getElementById('editTextBody').value;
    const id = document.getElementById('editTextForm').getAttribute('data-text-id')

    try {
      await axios.patch(`/texts/${id}`, {text_body: textBody}, {headers: {Authorization: `Bearer ${keycloak.token}`, 'Content-Type': 'application/json',}});

      document.getElementById('editTextForm').reset();
      const modalElement = document.getElementById('editTextModal');
      const modal = bootstrap.Modal.getInstance(modalElement);
      modal.hide();

      await fetchTextData(keycloak.token);
    } catch (error) {
      console.error('Error creating text:', error);
    }
  });
</script>
</body>
</html>
